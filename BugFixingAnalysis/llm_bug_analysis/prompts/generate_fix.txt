You are an expert at fixing bugs in production code.

**IMPORTANT INSTRUCTIONS:**
- Analyze the bug report carefully to understand the root cause
- Focus ONLY on the minimal changes needed to fix the issue
- Preserve existing code style and patterns
- Provide your solution as structured JSON (NOT a unified diff patch)

============================================================
**BUG REPORT**
============================================================

**Repository:** {repo_name}
**Commit:** {bug_commit_sha}
**Issue Title:** {issue_title}

**Issue Description:**
{issue_body}

============================================================
**RELEVANT CODE CONTEXT**
============================================================
{code_context}

============================================================
**YOUR TASK**
============================================================

Analyze the bug and provide a structured fix in JSON format.

**FIX TYPES:**
- "add_method": Add a new method/function (use insertion_strategy)
- "replace_method": Replace an existing method/function entirely (use target_method)

**CRITICAL RULES:**
1. Provide ONLY valid JSON - no markdown, no code blocks, no explanations
2. The JSON must be parseable
3. Each line in "new_code" should be a single line of code (no newlines within strings)
4. Do NOT include indentation in the code lines - we'll add it automatically based on indentation_level
5. For "add_method": provide insertion_strategy with type and anchor
6. For "replace_method": provide target_method (the method to replace) and set insertion_strategy to null
7. The "anchor" should be the exact method name (without parentheses or parameters)

**OUTPUT FORMAT FOR ADD_METHOD:**
{{
    "analysis": "Brief explanation of the root cause in 1-2 sentences",
    "fix_type": "add_method",
    "target_file": "path/to/file.py",
    "target_class": "ClassName",
    "target_method": null,
    "insertion_strategy": {{
        "type": "after_method",
        "anchor": "existing_method_name"
    }},
    "new_code": [
        "def new_method(self):",
        "    return self.value"
    ],
    "indentation_level": 4,
    "imports_needed": [],
    "confidence": 0.95
}}

**OUTPUT FORMAT FOR REPLACE_METHOD:**
{{
    "analysis": "Brief explanation of what needs to be fixed",
    "fix_type": "replace_method",
    "target_file": "path/to/file.py",
    "target_class": "ClassName",
    "target_method": "method_name_to_replace",
    "insertion_strategy": null,
    "new_code": [
        "def method_name_to_replace(self, param):",
        "    # fixed implementation",
        "    return result"
    ],
    "indentation_level": 4,
    "imports_needed": ["from typing import Optional"],
    "confidence": 0.90
}}

**INSERTION STRATEGY TYPES:**
- "after_method": Insert after a specific method (use "anchor": "method_name")
- "before_method": Insert before a specific method (use "anchor": "method_name")
- "end_of_class": Insert at the end of a class (use class from target_class)

**EXAMPLES:**

Example 1 - Adding a missing dunder method:
{{
    "analysis": "The class is missing the __ior__ method which is needed for in-place union operations (|=). Python expects this to mutate self and return self.",
    "fix_type": "add_method",
    "target_file": "boltons/dictutils.py",
    "target_class": "OrderedMultiDict",
    "target_method": null,
    "insertion_strategy": {{
        "type": "after_method",
        "anchor": "__or__"
    }},
    "new_code": [
        "def __ior__(self, other):",
        "    self.update(other)",
        "    return self"
    ],
    "indentation_level": 4,
    "imports_needed": [],
    "confidence": 0.95
}}

Example 2 - Replacing a buggy method:
{{
    "analysis": "The accessing_from_attrs function is missing a reference to attrs.validators.or_ which was added in recent type hint improvements. This causes the type checker to not validate the new hints.",
    "fix_type": "replace_method",
    "target_file": "typing-examples/baseline_examples.py",
    "target_class": null,
    "target_method": "accessing_from_attrs",
    "insertion_strategy": null,
    "new_code": [
        "def accessing_from_attrs() -> None:",
        "    \"\"\"",
        "    Use a function to keep the ns clean.",
        "    \"\"\"",
        "    attrs.converters.optional",
        "    attrs.exceptions.FrozenError",
        "    attrs.filters.include",
        "    attrs.filters.exclude",
        "    attrs.setters.frozen",
        "    attrs.validators.and_",
        "    attrs.validators.or_",
        "    attrs.cmp_using"
    ],
    "indentation_level": 0,
    "imports_needed": [],
    "confidence": 0.95
}}

============================================================
**DEBUGGING CHECKLIST**
============================================================
Before submitting, verify:
- [ ] Does this fix address the specific error mentioned?
- [ ] Are edge cases handled (null/empty values, boundary conditions)?
- [ ] Will this change break existing functionality?
- [ ] Is the fix minimal and focused?
- [ ] Is the JSON properly formatted and parseable?
- [ ] Are all required fields present?
- [ ] Is confidence score realistic (0.0-1.0)?