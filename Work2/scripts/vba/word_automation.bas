' VBA Module for Word - Document Automation and Google Docs Integration
' Place this code in a VBA module in Word

Option Explicit

' Constants for Google Docs API
Private Const GOOGLE_DOCS_API_URL As String = "https://docs.googleapis.com/v1/documents/"
Private Const HTTP_TIMEOUT As Long = 30000

' Configuration variables
Private GoogleApiKey As String
Private DocumentId As String

' Document automation functions
Public Sub AutoGenerateDocuments()
    On Error GoTo ErrorHandler
    
    Application.ScreenUpdating = False
    
    ' Get data source (Excel file or CSV)
    Dim dataFile As String
    dataFile = GetDataSourceFile()
    
    If dataFile = "" Then
        MsgBox "No data source selected!", vbExclamation
        GoTo Cleanup
    End If
    
    ' Load template
    Dim templateDoc As Document
    Set templateDoc = ActiveDocument
    
    If templateDoc Is Nothing Then
        MsgBox "Please open a template document first!", vbExclamation
        GoTo Cleanup
    End If
    
    ' Process data and generate documents
    Dim recordCount As Long
    recordCount = ProcessDataFile(dataFile, templateDoc)
    
    MsgBox "Generated " & recordCount & " documents successfully!", vbInformation
    
Cleanup:
    Application.ScreenUpdating = True
    Exit Sub
    
ErrorHandler:
    MsgBox "Error in document generation: " & Err.Description, vbCritical
    GoTo Cleanup
End Sub

' Process data file and generate documents
Private Function ProcessDataFile(dataFilePath As String, templateDoc As Document) As Long
    On Error GoTo ErrorHandler
    
    Dim fso As Object
    Set fso = CreateObject("Scripting.FileSystemObject")
    
    Dim file As Object
    Set file = fso.OpenTextFile(dataFilePath, 1) ' For reading
    
    Dim lineCount As Long
    lineCount = 0
    
    ' Read header line
    If Not file.AtEndOfStream Then
        Dim headerLine As String
        headerLine = file.ReadLine
        
        Dim headers() As String
        headers = Split(headerLine, ",")
        
        ' Process each data line
        Do While Not file.AtEndOfStream
            Dim dataLine As String
            dataLine = file.ReadLine
            
            Dim values() As String
            values = Split(dataLine, ",")
            
            ' Generate document for this record
            If UBound(values) >= UBound(headers) Then
                GenerateDocumentFromTemplate templateDoc, headers, values, lineCount + 1
                lineCount = lineCount + 1
            End If
        Loop
    End If
    
    file.Close
    ProcessDataFile = lineCount
    Exit Function
    
ErrorHandler:
    ProcessDataFile = 0
    If Not file Is Nothing Then file.Close
End Function

' Generate document from template with data
Private Sub GenerateDocumentFromTemplate(templateDoc As Document, headers() As String, values() As String, recordNum As Long)
    On Error GoTo ErrorHandler
    
    ' Create new document from template
    Dim newDoc As Document
    Set newDoc = Documents.Add(templateDoc.FullName)
    
    ' Replace placeholders with actual values
    Dim i As Long
    For i = 0 To UBound(headers)
        If i <= UBound(values) Then
            Dim placeholder As String
            placeholder = "{{" & Trim(headers(i)) & "}}"
            
            Dim replaceValue As String
            replaceValue = Trim(values(i))
            
            ' Remove quotes if present
            If Left(replaceValue, 1) = """" And Right(replaceValue, 1) = """" Then
                replaceValue = Mid(replaceValue, 2, Len(replaceValue) - 2)
            End If
            
            ' Replace in document
            ReplaceTextInDocument newDoc, placeholder, replaceValue
        End If
    Next i
    
    ' Generate filename
    Dim fileName As String
    fileName = GenerateFileName(headers, values, recordNum)
    
    ' Save document
    Dim outputPath As String
    outputPath = GetOutputDirectory() & "\" & fileName & ".docx"
    
    newDoc.SaveAs2 outputPath
    newDoc.Close
    
    Exit Sub
    
ErrorHandler:
    If Not newDoc Is Nothing Then newDoc.Close SaveChanges:=False
End Sub

' Replace text in document (including headers/footers)
Private Sub ReplaceTextInDocument(doc As Document, findText As String, replaceText As String)
    On Error Resume Next
    
    ' Replace in main document
    With doc.Content.Find
        .Text = findText
        .Replacement.Text = replaceText
        .Execute Replace:=wdReplaceAll
    End With
    
    ' Replace in headers
    Dim section As section
    For Each section In doc.Sections
        Dim header As HeaderFooter
        For Each header In section.Headers
            If header.Exists Then
                With header.Range.Find
                    .Text = findText
                    .Replacement.Text = replaceText
                    .Execute Replace:=wdReplaceAll
                End With
            End If
        Next header
        
        ' Replace in footers
        Dim footer As HeaderFooter
        For Each footer In section.Footers
            If footer.Exists Then
                With footer.Range.Find
                    .Text = findText
                    .Replacement.Text = replaceText
                    .Execute Replace:=wdReplaceAll
                End With
            End If
        Next footer
    Next section
    
    On Error GoTo 0
End Sub

' Generate filename from data
Private Function GenerateFileName(headers() As String, values() As String, recordNum As Long) As String
    On Error GoTo ErrorHandler
    
    ' Look for name field
    Dim nameValue As String
    nameValue = ""
    
    Dim i As Long
    For i = 0 To UBound(headers)
        If i <= UBound(values) Then
            Dim headerName As String
            headerName = LCase(Trim(headers(i)))
            
            If InStr(headerName, "name") > 0 Or headerName = "nome" Or headerName = "nom" Then
                nameValue = Trim(values(i))
                ' Remove quotes if present
                If Left(nameValue, 1) = """" And Right(nameValue, 1) = """" Then
                    nameValue = Mid(nameValue, 2, Len(nameValue) - 2)
                End If
                Exit For
            End If
        End If
    Next i
    
    ' Clean filename
    If nameValue <> "" Then
        nameValue = Replace(nameValue, " ", "_")
        nameValue = Replace(nameValue, "/", "_")
        nameValue = Replace(nameValue, "\", "_")
        nameValue = Replace(nameValue, ":", "_")
        nameValue = Replace(nameValue, "*", "_")
        nameValue = Replace(nameValue, "?", "_")
        nameValue = Replace(nameValue, """", "_")
        nameValue = Replace(nameValue, "<", "_")
        nameValue = Replace(nameValue, ">", "_")
        nameValue = Replace(nameValue, "|", "_")
        
        GenerateFileName = "document_" & nameValue & "_" & recordNum
    Else
        GenerateFileName = "document_" & recordNum
    End If
    
    Exit Function
    
ErrorHandler:
    GenerateFileName = "document_" & recordNum
End Function

' Get data source file
Private Function GetDataSourceFile() As String
    On Error GoTo ErrorHandler
    
    Dim fd As FileDialog
    Set fd = Application.FileDialog(msoFileDialogFilePicker)
    
    With fd
        .Title = "Select Data Source File"
        .Filters.Add "CSV Files", "*.csv"
        .Filters.Add "Text Files", "*.txt"
        .FilterIndex = 1
        .AllowMultiSelect = False
        
        If .Show = -1 Then
            GetDataSourceFile = .SelectedItems(1)
        Else
            GetDataSourceFile = ""
        End If
    End With
    
    Set fd = Nothing
    Exit Function
    
ErrorHandler:
    GetDataSourceFile = ""
    Set fd = Nothing
End Function

' Get output directory
Private Function GetOutputDirectory() As String
    On Error GoTo ErrorHandler
    
    Dim fd As FileDialog
    Set fd = Application.FileDialog(msoFileDialogFolderPicker)
    
    With fd
        .Title = "Select Output Directory"
        .AllowMultiSelect = False
        
        If .Show = -1 Then
            GetOutputDirectory = .SelectedItems(1)
        Else
            ' Default to Documents folder
            GetOutputDirectory = Environ("USERPROFILE") & "\Documents\GeneratedDocuments"
            
            ' Create directory if it doesn\'t exist
            Dim fso As Object
            Set fso = CreateObject("Scripting.FileSystemObject")
            If Not fso.FolderExists(GetOutputDirectory) Then
                fso.CreateFolder GetOutputDirectory
            End If
        End If
    End With
    
    Set fd = Nothing
    Exit Function
    
ErrorHandler:
    GetOutputDirectory = Environ("USERPROFILE") & "\Documents"
    Set fd = Nothing
End Function

' Google Docs Integration Functions

' Initialize Google Docs connection
Public Sub InitializeGoogleDocs()
    On Error GoTo ErrorHandler
    
    GoogleApiKey = GetConfigValue("GoogleApiKey")
    DocumentId = GetConfigValue("DocumentId")
    
    If GoogleApiKey = "" Then
        MsgBox "Please configure Google API credentials first!", vbExclamation
        Exit Sub
    End If
    
    MsgBox "Google Docs integration initialized successfully!", vbInformation
    Exit Sub
    
ErrorHandler:
    MsgBox "Error initializing Google Docs: " & Err.Description, vbCritical
End Sub

' Export current document to Google Docs
Public Sub ExportToGoogleDocs()
    On Error GoTo ErrorHandler
    
    If GoogleApiKey = "" Then
        InitializeGoogleDocs
        If GoogleApiKey = "" Then Exit Sub
    End If
    
    Application.ScreenUpdating = False
    
    Dim doc As Document
    Set doc = ActiveDocument
    
    If doc Is Nothing Then
        MsgBox "No document is open!", vbExclamation
        GoTo Cleanup
    End If
    
    ' Convert document to plain text
    Dim docText As String
    docText = doc.Content.Text
    
    ' Create Google Doc
    Dim result As Boolean
    result = CreateGoogleDoc(doc.Name, docText)
    
    If result Then
        MsgBox "Document exported to Google Docs successfully!", vbInformation
    Else
        MsgBox "Failed to export document to Google Docs!", vbCritical
    End If
    
Cleanup:
    Application.ScreenUpdating = True
    Exit Sub
    
ErrorHandler:
    MsgBox "Error exporting to Google Docs: " & Err.Description, vbCritical
    GoTo Cleanup
End Sub

' Import Google Doc to Word
Public Sub ImportFromGoogleDocs()
    On Error GoTo ErrorHandler
    
    If GoogleApiKey = "" Or DocumentId = "" Then
        InitializeGoogleDocs
        If GoogleApiKey = "" Then Exit Sub
    End If
    
    Application.ScreenUpdating = False
    
    ' Get document content from Google Docs
    Dim docContent As String
    docContent = GetGoogleDocContent()
    
    If docContent = "" Then
        MsgBox "No content received from Google Docs!", vbExclamation
        GoTo Cleanup
    End If
    
    ' Create new Word document with content
    Dim newDoc As Document
    Set newDoc = Documents.Add
    
    newDoc.Content.Text = docContent
    
    MsgBox "Document imported from Google Docs successfully!", vbInformation
    
Cleanup:
    Application.ScreenUpdating = True
    Exit Sub
    
ErrorHandler:
    MsgBox "Error importing from Google Docs: " & Err.Description, vbCritical
    GoTo Cleanup
End Sub

' Create new Google Doc
Private Function CreateGoogleDoc(title As String, content As String) As Boolean
    On Error GoTo ErrorHandler
    
    Dim http As Object
    Set http = CreateObject("MSXML2.XMLHTTP")
    
    ' Create document request
    Dim createUrl As String
    createUrl = GOOGLE_DOCS_API_URL & "?key=" & GoogleApiKey
    
    Dim createJson As String
    createJson = "{"
    createJson = createJson & """title"": """ & title & """"
    createJson = createJson & "}"
    
    ' Create document
    http.Open "POST", createUrl, False
    http.setRequestHeader "Content-Type", "application/json"
    http.setTimeouts 0, 0, 0, HTTP_TIMEOUT
    http.send createJson
    
    If http.Status <> 200 Then
        Debug.Print "Create Doc Error: " & http.Status & " - " & http.responseText
        CreateGoogleDoc = False
        GoTo Cleanup
    End If
    
    ' Parse response to get document ID
    Dim response As String
    response = http.responseText
    
    ' Extract document ID (basic parsing)
    Dim startPos As Long
    startPos = InStr(response, """documentId"":")
    If startPos > 0 Then
        startPos = InStr(startPos, response, """") + 1
        Dim endPos As Long
        endPos = InStr(startPos, response, """")
        
        If endPos > startPos Then
            DocumentId = Mid(response, startPos, endPos - startPos)
            
            ' Now insert content
            CreateGoogleDoc = InsertContentToGoogleDoc(content)
        Else
            CreateGoogleDoc = False
        End If
    Else
        CreateGoogleDoc = False
    End If
    
Cleanup:
    Set http = Nothing
    Exit Function
    
ErrorHandler:
    CreateGoogleDoc = False
    Set http = Nothing
End Function

' Insert content to Google Doc
Private Function InsertContentToGoogleDoc(content As String) As Boolean
    On Error GoTo ErrorHandler
    
    Dim http As Object
    Set http = CreateObject("MSXML2.XMLHTTP")
    
    Dim url As String
    url = GOOGLE_DOCS_API_URL & DocumentId & ":batchUpdate?key=" & GoogleApiKey
    
    ' Escape content for JSON
    content = Replace(content, "\", "\\")
    content = Replace(content, """", "\""")
    content = Replace(content, vbCrLf, "\n")
    content = Replace(content, vbCr, "\n")
    content = Replace(content, vbLf, "\n")
    
    Dim requestJson As String
    requestJson = "{"
    requestJson = requestJson & """requests"": ["
    requestJson = requestJson & "{"
    requestJson = requestJson & """insertText"": {"
    requestJson = requestJson & """location"": {"
    requestJson = requestJson & """index"": 1"
    requestJson = requestJson & "},"
    requestJson = requestJson & """text"": """ & content & """"
    requestJson = requestJson & "}"
    requestJson = requestJson & "}"
    requestJson = requestJson & "]"
    requestJson = requestJson & "}"
    
    ' Send request
    http.Open "POST", url, False
    http.setRequestHeader "Content-Type", "application/json"
    http.setTimeouts 0, 0, 0, HTTP_TIMEOUT
    http.send requestJson
    
    If http.Status = 200 Then
        InsertContentToGoogleDoc = True
    Else
        Debug.Print "Insert Content Error: " & http.Status & " - " & http.responseText
        InsertContentToGoogleDoc = False
    End If
    
    Set http = Nothing
    Exit Function
    
ErrorHandler:
    InsertContentToGoogleDoc = False
    Set http = Nothing
End Function

' Get content from Google Doc
Private Function GetGoogleDocContent() As String
    On Error GoTo ErrorHandler
    
    Dim http As Object
    Set http = CreateObject("MSXML2.XMLHTTP")
    
    Dim url As String
    url = GOOGLE_DOCS_API_URL & DocumentId & "?key=" & GoogleApiKey
    
    ' Send request
    http.Open "GET", url, False
    http.setTimeouts 0, 0, 0, HTTP_TIMEOUT
    http.send
    
    If http.Status = 200 Then
        ' Extract text content from response (simplified)
        Dim response As String
        response = http.responseText
        
        ' Basic text extraction (would need more sophisticated parsing for full formatting)
        GetGoogleDocContent = ExtractTextFromResponse(response)
    Else
        Debug.Print "Get Content Error: " & http.Status & " - " & http.responseText
        GetGoogleDocContent = ""
    End If
    
    Set http = Nothing
    Exit Function
    
ErrorHandler:
    GetGoogleDocContent = ""
    Set http = Nothing
End Function

' Extract text from Google Docs API response
Private Function ExtractTextFromResponse(response As String) As String
    On Error GoTo ErrorHandler
    
    Dim content As String
    content = ""
    
    ' Look for content elements (simplified parsing)
    Dim pos As Long
    pos = 1
    
    Do
        Dim textStart As Long
        textStart = InStr(pos, response, """content"":")
        
        If textStart = 0 Then Exit Do
        
        ' Find the text content
        Dim contentStart As Long
        contentStart = InStr(textStart, response, """textRun"":")
        
        If contentStart > 0 Then
            Dim textPos As Long
            textPos = InStr(contentStart, response, """content"":")
            
            If textPos > 0 Then
                textPos = InStr(textPos, response, """") + 1
                Dim textEnd As Long
                textEnd = InStr(textPos, response, """")
                
                If textEnd > textPos Then
                    Dim textContent As String
                    textContent = Mid(response, textPos, textEnd - textPos)
                    
                    ' Unescape JSON
                    textContent = Replace(textContent, "\n", vbCrLf)
                    textContent = Replace(textContent, "\""", """")
                    textContent = Replace(textContent, "\\", "\")
                    
                    content = content & textContent
                End If
            End If
        End If
        
        pos = textStart + 1
    Loop
    
    ExtractTextFromResponse = content
    Exit Function
    
ErrorHandler:
    ExtractTextFromResponse = ""
End Function

' Configuration management
Private Function GetConfigValue(configKey As String) As String
    On Error GoTo ErrorHandler
    
    ' Simple registry-based config storage
    Dim value As String
    value = GetSetting("WordGoogleIntegration", "Settings", configKey, "")
    
    If value = "" Then
        ' Prompt user for value
        Select Case configKey
            Case "GoogleApiKey"
                value = InputBox("Enter Google API Key:", "Configuration", "")
            Case "DocumentId"
                value = InputBox("Enter Google Document ID:", "Configuration", "")
            Case Else
                value = ""
        End Select
        
        ' Save for next time
        If value <> "" Then
            SaveSetting "WordGoogleIntegration", "Settings", configKey, value
        End If
    End If
    
    GetConfigValue = value
    Exit Function
    
ErrorHandler:
    GetConfigValue = ""
End Function

' PDF Export function
Public Sub ExportToPDF()
    On Error GoTo ErrorHandler
    
    Dim doc As Document
    Set doc = ActiveDocument
    
    If doc Is Nothing Then
        MsgBox "No document is open!", vbExclamation
        Exit Sub
    End If
    
    ' Get output path
    Dim pdfPath As String
    pdfPath = Replace(doc.FullName, ".docx", ".pdf")
    pdfPath = Replace(pdfPath, ".doc", ".pdf")
    
    ' Export as PDF
    doc.ExportAsFixedFormat _
        OutputFileName:=pdfPath, _
        ExportFormat:=wdExportFormatPDF, _
        OpenAfterExport:=False, _
        OptimizeFor:=wdExportOptimizeForPrint, _
        BitmapMissingFonts:=True, _
        DocStructureTags:=True, _
        CreateBookmarks:=wdExportDocumentContent, _
        IncludeDocProps:=True, _
        KeepIRM:=True
    
    MsgBox "Document exported to PDF: " & pdfPath, vbInformation
    Exit Sub
    
ErrorHandler:
    MsgBox "Error exporting to PDF: " & Err.Description, vbCritical
End Sub

' Setup Google Docs integration
Public Sub SetupGoogleDocsIntegration()
    On Error GoTo ErrorHandler
    
    MsgBox "Google Docs Integration Setup" & vbCrLf & vbCrLf & _
           "You will need:" & vbCrLf & _
           "1. Google API Key" & vbCrLf & _
           "2. Google Document ID (optional)", vbInformation
    
    Dim apiKey As String
    apiKey = InputBox("Enter your Google API Key:", "Google API Key")
    
    If apiKey <> "" Then
        SaveSetting "WordGoogleIntegration", "Settings", "GoogleApiKey", apiKey
        
        Dim docId As String
        docId = InputBox("Enter Google Document ID (optional):", "Document ID", "")
        
        If docId <> "" Then
            SaveSetting "WordGoogleIntegration", "Settings", "DocumentId", docId
        End If
        
        MsgBox "Setup completed successfully!", vbInformation
    End If
    
    Exit Sub
    
ErrorHandler:
    MsgBox "Error during setup: " & Err.Description, vbCritical
End Sub

' Clean up function
Public Sub CleanupTempFiles()
    On Error Resume Next
    
    ' Clean up any temporary files created during processing
    Dim tempPath As String
    tempPath = Environ("TEMP") & "\WordAutomation"
    
    Dim fso As Object
    Set fso = CreateObject("Scripting.FileSystemObject")
    
    If fso.FolderExists(tempPath) Then
        fso.DeleteFolder tempPath, True
    End If
    
    Set fso = Nothing
End Sub